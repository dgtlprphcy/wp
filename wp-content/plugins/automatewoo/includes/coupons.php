<?php

namespace AutomateWoo;

/**
 * @class Coupons
 * @since 2.9
 */
class Coupons {


	/**
	 * Offset coupon cleaning to avoid overloading the worker
	 */
	static function schedule_clean_expired() {
		if ( AW()->options()->clean_expired_coupons ) {
			wp_schedule_single_event( time() + ( MINUTE_IN_SECONDS * 15 ), 'automatewoo/coupons/clean_expired' );
		}
	}


	/**
	 * Delete a set amount of expired coupons that were generated by AW
	 */
	static function clean_expired() {

		$limit = apply_filters( 'automatewoo/coupons/clean_expired_limit', 25 );
		$days_to_keep_expired = (int) apply_filters( 'automatewoo/coupons/days_to_keep_expired', 14 );

		$delete_date = new \DateTime();
		$delete_date->modify( "-$days_to_keep_expired days" );
		$delete_timestamp = $delete_date->getTimestamp();

		$query_args = [
			'fields' => 'ids',
			'post_type' => 'shop_coupon',
			'post_status' => 'any',
			'posts_per_page' => $limit,
			'orderby' => 'date',
			'order' => 'ASC',
			'meta_query' => [
				[
					'key' => '_is_aw_coupon',
					'value' => true
				]
			]
		];

		$query = new \WP_Query( $query_args );

		foreach ( $query->posts as $coupon_id ) {

			$expires_timestamp = Compat\Coupon::get_date_expires_by_id( $coupon_id );

			if ( ! $expires_timestamp || ! is_numeric( $expires_timestamp ) ) {
				continue;
			}

			if ( $expires_timestamp < $delete_timestamp ) {
				wp_delete_post( $coupon_id, true );
			}
		}

	}

}
